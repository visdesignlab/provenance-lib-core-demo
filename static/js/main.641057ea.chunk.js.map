{"version":3,"sources":["Components/BarChart/Bars.tsx","Components/BarChart/BarVisualization.tsx","Components/NodeLink/NodeLinkDetails.tsx","Components/NodeLink/NodeLinkVisualization.tsx","Components/Visualization.tsx","Components/UndoRedoButtons.tsx","App.tsx","serviceWorker.ts","Interfaces/ApplicationState.ts","Interfaces/Store.ts","index.tsx","Provenance.ts"],"names":["convertIDtoClassForm","str","replace","inject","observer","store","width","height","data","selectedNode","useMemo","counts","map","d","count","minCount","min","maxCount","max","scaleBand","domain","character","range","paddingInner","paddingOuter","scaleLinear","nice","xScale","yScale","useEffect","xAxis","axisBottom","yAxis","axisLeft","select","call","selectAll","style","attr","className","transform","Popup","key","trigger","Bar","isSelected","onClick","actions","selectNode","onMouseOver","onMouseOut","el","x","y","bandwidth","content","Header","styled","props","svgRef","useRef","useState","dimensions","setDimensions","useLayoutEffect","current","clientHeight","clientWidth","links","linkMap","forEach","l","source","target","list","Object","keys","k","sort","a","b","xPadding","yPadding","SVG","ref","svg","getNodePositions","isNodePositionSet","nodes","neighbourNodeIds","find","id","link","push","JSON","stringify","colorScale","scaleOrdinal","schemeCategory10","node","nodeId","curr","sourceLinks","targetLinks","on","drag","d3","setNodePositions","Link","index","x1","x2","y1","y2","Node","isNeighbour","includes","onMouseLeave","cx","cy","r","fill","group","circle","line","pushDimension","newDims","graphString","dimension","dimensionString","barData","grph","parse","bar","simulation","forceSimulation","force","forceLink","forceManyBody","strength","forceCenter","i","tick","VisualizationDiv","VisPadding","VisualizationBorder","div","isAtRoot","isAtLatest","Button","Group","size","icon","primary","disabled","goBack","Or","secondary","goForward","urlRef","showMessage","setShowMessage","window","location","href","shareUrl","setShareUrl","ClipboardJS","LayoutDiv","Container","LargeHeader","textAlign","Menu","compact","Item","Modal","labelPosition","Icon","name","Content","scrolling","Message","info","length","Segment","wordWrap","Actions","data-clipboard-text","header","onDismiss","Boolean","hostname","match","defaultState","nodePositions","provenance","initProvenance","this","addAction","state","applyAction","pos","skipProvenance","observable","computed","action","addGlobalObserver","currentNode","isStateNode","parent","root","children","addObserver","done","goBackOneStep","goForwardOneStep","setupProvenance","document","onkeydown","e","mac","test","navigator","platform","shiftKey","metaKey","ctrlKey","which","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.641057ea.chunk.js","sourcesContent":["import React, {FC, useEffect, useMemo} from 'react';\nimport Store from '../../Interfaces/Store';\nimport {inject, observer} from 'mobx-react';\nimport {\n  scaleLinear,\n  scaleBand,\n  min,\n  max,\n  select,\n  axisBottom,\n  axisLeft,\n  selectAll,\n} from 'd3';\nimport styled from 'styled-components';\nimport {actions} from '../..';\nimport {Popup, Header} from 'semantic-ui-react';\n\ninterface OwnProps {\n  store?: Store;\n  height: number;\n  width: number;\n  data: {character: string; count: number}[];\n}\n\ntype Props = OwnProps;\n\nconst convertIDtoClassForm = (str: string): string => {\n  return str.replace('.', '_');\n};\n\nconst Bars: FC<Props> = ({store, width, height, data}: Props) => {\n  const {selectedNode} = store!;\n\n  const [xScale, yScale] = useMemo(() => {\n    const counts = data.map(d => d.count);\n    const [minCount, maxCount] = [min(counts) || 0, max(counts) || 0];\n\n    const xScale = scaleBand()\n      .domain(data.map(d => d.character))\n      .range([0, width])\n      .paddingInner(0.2)\n      .paddingOuter(0.2);\n\n    const yScale = scaleLinear()\n      .domain([maxCount, minCount])\n      .range([0, height])\n      .nice();\n\n    return [xScale, yScale];\n  }, [height, width, data]);\n\n  useEffect(() => {\n    const xAxis = axisBottom(xScale);\n    const yAxis = axisLeft(yScale);\n\n    select('.x-axis').call(xAxis as any);\n    select('.y-axis').call(yAxis as any);\n\n    select('.x-axis')\n      .selectAll('text')\n      .style('text-anchor', 'end')\n      .attr('transform', 'rotate(-90)')\n      .attr('dx', '-1em')\n      .attr('class', (d: any) => {\n        return `bar-text ${convertIDtoClassForm(d)}`;\n      })\n      .attr('dy', '-1em')\n      .style('dominant-baseline', 'middle');\n  }, [xScale, yScale]);\n\n  return (\n    <>\n      <g className=\"axes\">\n        <g transform={`translate(0, ${height})`} className=\"x-axis\"></g>\n        <g className=\"y-axis\"></g>\n      </g>\n      <g className=\"bars\">\n        {data.map(({character, count}) => (\n          <Popup\n            key={character}\n            trigger={\n              <Bar\n                isSelected={selectedNode === character}\n                onClick={() => actions.selectNode(character)}\n                className={convertIDtoClassForm(character)}\n                onMouseOver={() => {\n                  selectAll(`.${convertIDtoClassForm(character)}`)\n                    .style('font-weight', 'bold')\n                    .attr('r', 12);\n                }}\n                onMouseOut={() => {\n                  const el = selectAll(\n                    `.${convertIDtoClassForm(character)}`,\n                  ).style('font-weight', 'normal');\n                  if (character !== selectedNode) el.attr('r', 8);\n                }}\n                x={xScale(character)}\n                y={yScale(count)}\n                width={xScale.bandwidth()}\n                height={height - yScale(count)}></Bar>\n            }\n            content={<Header>{character}</Header>}></Popup>\n        ))}\n      </g>\n    </>\n  );\n};\n\nexport default inject('store')(observer(Bars));\n\ninterface BarProps {\n  isSelected: boolean;\n}\n\nconst Bar = styled('rect')<BarProps>`\n  fill: ${props => (props.isSelected ? 'red' : 'steelblue')};\n  &:hover {\n    fill: ${props => (props.isSelected ? 'red' : 'blueviolet')};\n  }\n`;\n","import React, {FC, useRef, useLayoutEffect, useState, useMemo} from 'react';\nimport styled from 'styled-components';\nimport {inject, observer} from 'mobx-react';\nimport Bars from './Bars';\nimport Store from '../../Interfaces/Store';\n\ninterface OwnProps {\n  data: any;\n  store?: Store;\n}\n\ntype Props = OwnProps;\n\nconst BarVisualization: FC<Props> = ({data, store}: Props) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [dimensions, setDimensions] = useState({height: 0, width: 0});\n\n  useLayoutEffect(() => {\n    if (svgRef.current) {\n      setDimensions({\n        height: svgRef.current.clientHeight,\n        width: svgRef.current.clientWidth,\n      });\n    }\n  }, []);\n\n  const {links} = data;\n\n  const linkMap = useMemo(() => {\n    const map: {[key: string]: number} = {};\n\n    links.forEach((l: any) => {\n      if (!map[l.source]) {\n        map[l.source] = 0;\n      }\n      map[l.source] += 1;\n      if (!map[l.target]) {\n        map[l.target] = 0;\n      }\n      map[l.target] += 1;\n    });\n\n    const list = Object.keys(map).map(k => ({character: k, count: map[k]}));\n\n    list.sort((a, b) => b.count - a.count);\n\n    return list;\n  }, [links]);\n\n  const {width, height} = dimensions;\n  const xPadding = width * 0.05;\n  const yPadding = height * 0.12;\n\n  return (\n    <SVG ref={svgRef}>\n      <g transform={`translate(${xPadding}, ${yPadding})`}>\n        <Bars\n          data={linkMap}\n          height={height - 2 * yPadding}\n          width={width - 2 * xPadding}></Bars>\n      </g>\n    </SVG>\n  );\n};\n\nexport default inject('store')(observer(BarVisualization));\n\nconst SVG = styled.svg`\n  height: 100%;\n  width: 100%;\n`;\n","import React, {FC, useEffect} from 'react';\nimport Store from '../../Interfaces/Store';\nimport {actions} from '../..';\nimport * as d3 from 'd3';\nimport {inject, observer} from 'mobx-react';\nimport {select, scaleOrdinal, schemeCategory10, drag, selectAll} from 'd3';\nimport styled from 'styled-components';\nimport {Popup, Header} from 'semantic-ui-react';\n\ninterface OwnProps {\n  store?: Store;\n  height: number;\n  width: number;\n}\n\ntype Props = OwnProps;\n\nconst convertIDtoClassForm = (str: string): string => {\n  return str.replace('.', '_');\n};\n\nconst NodeLinkDetails: FC<Props> = ({store, height, width}: Props) => {\n  const {getNodePositions, isNodePositionSet, selectedNode} = store!;\n\n  let {nodes, links} = getNodePositions;\n\n  const neighbourNodeIds: string[] = [];\n\n  const selNode = nodes.find((d: any) => d.id === selectedNode);\n\n  if (selNode) {\n    links.forEach((link: any) => {\n      if (link.source.id === selectedNode) {\n        neighbourNodeIds.push(link.target.id);\n      }\n      if (link.target.id === selectedNode) {\n        neighbourNodeIds.push(link.source.id);\n      }\n    });\n  }\n\n  if (isNodePositionSet) {\n    if (JSON.stringify(nodes) !== JSON.stringify(getNodePositions.nodes)) {\n      nodes = getNodePositions.nodes;\n      links = getNodePositions.links;\n    }\n  }\n\n  const colorScale = scaleOrdinal(schemeCategory10);\n\n  useEffect(() => {\n    nodes.forEach((node: any) => {\n      const nodeId = convertIDtoClassForm(node.id);\n      const curr = select('.nodes').select(`.${nodeId}`);\n      const sourceLinks = select('.links').selectAll(`.S_${nodeId}`);\n      const targetLinks = select('.links').selectAll(`.T_${nodeId}`);\n\n      curr.on('click', () => {\n        actions.selectNode(node.id);\n      });\n\n      (curr as any).call(\n        drag()\n          .on('drag', () => {\n            curr.attr('cx', d3.event.x);\n            curr.attr('cy', d3.event.y);\n\n            sourceLinks.attr('x1', d3.event.x);\n            sourceLinks.attr('y1', d3.event.y);\n\n            targetLinks.attr('x2', d3.event.x);\n            targetLinks.attr('y2', d3.event.y);\n          })\n          .on('end', () => {\n            node.x = d3.event.x;\n            node.y = d3.event.y;\n\n            links.forEach((link: any) => {\n              if (link.source.id === node.id) {\n                link.source = node;\n              }\n              if (link.target.id === node.id) {\n                link.target = node;\n              }\n            });\n\n            actions.setNodePositions({nodes, links});\n          }),\n      );\n    });\n  }, [nodes, links]);\n\n  return (\n    <>\n      <g className=\"links\">\n        {links.map((link: any) => (\n          <Link\n            className={`link S_${convertIDtoClassForm(\n              link.source.id,\n            )} T_${convertIDtoClassForm(link.target.id)}`}\n            key={link.index}\n            x1={link.source.x}\n            x2={link.target.x}\n            y1={link.source.y}\n            y2={link.target.y}></Link>\n        ))}\n      </g>\n      <g className=\"nodes\">\n        {nodes.map((node: any) => (\n          <Popup\n            key={node.id}\n            trigger={\n              <Node\n                isNeighbour={neighbourNodeIds.includes(node.id)}\n                onMouseOver={() => {\n                  const curr = selectAll(`.${convertIDtoClassForm(node.id)}`);\n                  curr.attr('r', 12);\n                  curr.style('fill', 'blueviolet !important');\n                }}\n                onMouseLeave={() => {\n                  if (node.id !== selectedNode)\n                    select(`.${convertIDtoClassForm(node.id)}`).attr('r', 8);\n                }}\n                className={`node ${convertIDtoClassForm(node.id)}`}\n                cx={node.x}\n                cy={node.y}\n                r={node.id === selectedNode ? 12 : 8}\n                fill={colorScale(node.group)}></Node>\n            }\n            content={<Header>{node.id}</Header>}></Popup>\n        ))}\n      </g>\n    </>\n  );\n};\n\nexport default inject('store')(observer(NodeLinkDetails));\n\ninterface NodeProps {\n  isNeighbour: boolean;\n}\n\nconst Node = styled.circle<NodeProps>`\n  stroke-width: ${props => (props.isNeighbour ? '2px' : '1.5px')};\n  stroke: ${props => (props.isNeighbour ? '#000' : ' #fff')};\n`;\n\nconst Link = styled.line`\n  stroke-width: 2px;\n  stroke: #ccc;\n`;\n","import React, {FC, useState, useRef, useLayoutEffect} from 'react';\nimport Store from '../../Interfaces/Store';\nimport {inject, observer} from 'mobx-react';\nimport styled from 'styled-components';\nimport NodeLinkDetails from './NodeLinkDetails';\n\ninterface OwnProps {\n  store?: Store;\n  pushDimension: (dims: any) => void;\n}\n\ntype Props = OwnProps;\n\nconst NodeLinkVisualization: FC<Props> = ({pushDimension, store}: Props) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [dimensions, setDimensions] = useState({height: 0, width: 0});\n\n  useLayoutEffect(() => {\n    if (svgRef.current) {\n      const newDims = {\n        height: svgRef.current.clientHeight,\n        width: svgRef.current.clientWidth,\n      };\n      if (JSON.stringify(newDims) !== JSON.stringify(dimensions)) {\n        setDimensions(newDims);\n        pushDimension(newDims);\n      }\n    }\n  }, [pushDimension, dimensions]);\n\n  return (\n    <SVG ref={svgRef}>\n      <NodeLinkDetails\n        height={dimensions.height}\n        width={dimensions.width}></NodeLinkDetails>\n    </SVG>\n  );\n};\n\nexport default inject('store')(observer(NodeLinkVisualization));\n\nconst SVG = styled.svg`\n  height: 100%;\n  width: 100%;\n`;\n","import React, {FC, useMemo, useState} from 'react';\nimport styled from 'styled-components';\nimport data from '../Data/miserables.json';\nimport BarVisualization from './BarChart/BarVisualization';\nimport {inject, observer} from 'mobx-react';\nimport NodeLinkVisualization from './NodeLink/NodeLinkVisualization';\nimport {forceSimulation, forceLink, forceManyBody, forceCenter} from 'd3';\nimport {actions} from '../';\nimport Store from '../Interfaces/Store.js';\n\ninterface OwnProps {\n  store?: Store;\n}\n\ntype Props = OwnProps;\n\nconst Visualization: FC<Props> = ({store}: Props) => {\n  const {isNodePositionSet} = store!;\n  const graphString = JSON.stringify(data);\n\n  const [dimension, setDimensions] = useState({height: 0, width: 0});\n\n  const dimensionString = JSON.stringify(dimension);\n\n  const barData = useMemo(() => {\n    const grph = JSON.parse(graphString);\n    const bar = JSON.parse(graphString);\n\n    const {height, width} = JSON.parse(dimensionString);\n\n    const simulation = forceSimulation()\n      .force('link', forceLink().id((d: any) => d.id))\n      .force('charge', forceManyBody().strength(-100))\n      .force('center', forceCenter(width / 2, height / 2));\n\n    simulation.nodes(grph.nodes);\n    (simulation as any).force('link').links(grph.links);\n\n    for (let i = 0; i < 300; ++i) {\n      simulation.tick();\n    }\n\n    if (height > 0 && width > 0) {\n      if (!isNodePositionSet) {\n        actions.setNodePositions({...grph});\n      }\n    }\n\n    return bar;\n  }, [graphString, dimensionString, isNodePositionSet]);\n\n  return (\n    <VisualizationDiv>\n      <VisPadding>\n        <VisualizationBorder>\n          <NodeLinkVisualization\n            pushDimension={setDimensions}></NodeLinkVisualization>\n        </VisualizationBorder>\n      </VisPadding>\n      <VisPadding>\n        <VisualizationBorder>\n          <BarVisualization data={barData}></BarVisualization>\n        </VisualizationBorder>\n      </VisPadding>\n    </VisualizationDiv>\n  );\n};\n\nexport default inject('store')(observer(Visualization));\n\nconst VisualizationBorder = styled.div`\n  height: 100%;\n  width: 100%;\n  border: 1px solid black;\n`;\n\nconst VisPadding = styled.div`\n  height: 100%;\n  width: 100%;\n  padding: 1em;\n`;\n\nconst VisualizationDiv = styled.div`\n  height: 100%;\n  width: 100%;\n  padding: 1em;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n","import React, {FC} from 'react';\nimport Store from '../Interfaces/Store';\nimport {Button} from 'semantic-ui-react';\nimport {inject, observer} from 'mobx-react';\nimport {actions} from '..';\n\ninterface OwnProps {\n  store?: Store;\n}\n\nexport type Props = OwnProps;\n\nconst UndoRedoButtons: FC<Props> = ({store}: Props) => {\n  const {isAtRoot, isAtLatest} = store!;\n\n  return (\n    <Button.Group size=\"large\">\n      <Button\n        icon=\"undo\"\n        primary\n        content=\"Undo\"\n        disabled={isAtRoot}\n        onClick={actions.goBack}></Button>\n      <Button.Or></Button.Or>\n      <Button\n        icon=\"redo\"\n        secondary\n        content=\"Redo\"\n        disabled={isAtLatest}\n        onClick={actions.goForward}></Button>\n    </Button.Group>\n  );\n};\n\nexport default inject('store')(observer(UndoRedoButtons));\n","import React, {FC, useState, useRef} from 'react';\nimport styled from 'styled-components';\nimport {\n  Container,\n  Header,\n  Menu,\n  Message,\n  Button,\n  Icon,\n  Modal,\n  Segment,\n} from 'semantic-ui-react';\nimport Visualization from './Components/Visualization';\nimport {observer, inject} from 'mobx-react';\nimport Store from './Interfaces/Store';\nimport UndoRedoButtons from './Components/UndoRedoButtons';\nimport ClipboardJS from 'clipboard';\n\ninterface OwnProps {\n  store?: Store;\n}\n\ntype Props = OwnProps;\n\nconst App: FC<Props> = ({store}: Props) => {\n  const urlRef = useRef(null);\n\n  const {selectedNode} = store!;\n  const [showMessage, setShowMessage] = useState(true);\n  const [shareUrl, setShareUrl] = useState(window.location.href);\n\n  new ClipboardJS('.copy-clipboard');\n\n  return (\n    <LayoutDiv>\n      <Container>\n        <LargeHeader textAlign=\"center\" size=\"huge\">\n          Les Misérables Character Co-Occurence\n        </LargeHeader>\n        <Header textAlign=\"center\">Selected Node: {selectedNode}</Header>\n      </Container>\n      <Container textAlign=\"center\">\n        <Menu compact>\n          <Menu.Item>\n            <UndoRedoButtons></UndoRedoButtons>\n          </Menu.Item>\n          <Menu.Item>\n            <Modal\n              trigger={\n                <Button\n                  onClick={() =>\n                    setShareUrl(\n                      `${window.location.href}`,\n                    )\n                  }\n                  icon\n                  labelPosition=\"left\"\n                  primary>\n                  <Icon name=\"share alternate\"></Icon>\n                  Share current state with url\n                </Button>\n              }>\n              <Modal.Header>\n                Use the following URL to share your state\n              </Modal.Header>\n              <Modal.Content scrolling>\n                <Message info>Length of URL: {shareUrl.length}</Message>\n                <Segment\n                  ref={urlRef}\n                  textAlign=\"justified\"\n                  style={{wordWrap: 'anywhere'}}>\n                  {shareUrl}\n                </Segment>\n              </Modal.Content>\n              <Modal.Actions>\n                <Button\n                  icon\n                  className=\"copy-clipboard\"\n                  data-clipboard-text={shareUrl}>\n                  <Icon name=\"copy\"></Icon>\n                  Copy\n                </Button>\n              </Modal.Actions>\n            </Modal>\n          </Menu.Item>\n        </Menu>\n        {showMessage && (\n          <Message\n            info\n            header={\n              'This demo tracks node movement in the graph and selection of any character either from graph or barchart.'\n            }\n            content={\n              'Use the above buttons to undo and redo actions. You can also press (⌘/Ctrl + Z) for undo and (Shift + ⌘/Ctrl + Z) for redo.'\n            }\n            onDismiss={() => {\n              setShowMessage(false);\n            }}></Message>\n        )}\n      </Container>\n      <Visualization></Visualization>\n    </LayoutDiv>\n  );\n};\n\nexport default inject('store')(observer(App));\n\nconst LargeHeader = styled(Header)`\n  font-size: 4em !important;\n  padding: 0.25em !important;\n`;\n\nconst LayoutDiv = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: grid;\n  grid-template-rows: min-content min-content 1fr;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export interface NodePosition {\n  x: number;\n  y: number;\n}\n\nexport interface NodeMap {\n  nodes: any[];\n  links: any[];\n}\n\nexport interface ApplicationState {\n  nodePositions: NodeMap;\n  selectedNode: string;\n}\n\nexport const defaultState: ApplicationState = {\n  nodePositions: {\n    nodes: [],\n    links: [],\n  },\n  selectedNode: 'none',\n};\n","import {observable, computed, action} from 'mobx';\nimport {NodeMap, ApplicationState, defaultState} from './ApplicationState';\n\nimport {\n  Provenance,\n  initProvenance\n} from '@visdesignlab/provenance-lib-core';\n\nexport default class Store {\n  provenance: Provenance<ApplicationState, unknown, unknown> = initProvenance<ApplicationState, unknown, unknown>(defaultState, false);\n\n  @observable isAtRoot: boolean = true;\n  @observable isAtLatest: boolean = true;\n  @observable selectedNode: string = defaultState.selectedNode;\n  @observable nodePositions: NodeMap = defaultState.nodePositions;\n\n  @computed get getNodePositions() {\n    return JSON.parse(JSON.stringify(this.nodePositions));\n  };\n  @computed get isNodePositionSet() {\n    return (\n      this.nodePositions.nodes.length > 0 && this.nodePositions.links.length > 0\n    );\n  };\n  //\n  @action selectNode(node:string)\n  {\n    let a = this.provenance.addAction(\n      `Selecting ${node}`,\n       (state: ApplicationState) => {\n        if (state.selectedNode === node) {\n          state.selectedNode = 'none';\n        } else {\n          state.selectedNode = node;\n        }\n        return state;\n    });\n\n    a.applyAction();\n  }\n\n  @action setNodePositions(pos: NodeMap, skipProvenance: boolean = false) {\n    if (skipProvenance) {\n      this.nodePositions = JSON.parse(JSON.stringify(pos));\n      return;\n    }\n    let a = this.provenance.addAction(\n      'Setting node positions',\n      (state: ApplicationState) => {\n        state.nodePositions = JSON.parse(JSON.stringify(pos));\n        return state;\n      },\n    );\n\n    a.applyAction();\n  };\n}\n\nexport const store = new Store();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'mobx-react';\nimport {store} from './Interfaces/Store';\nimport {setupProvenance} from './Provenance';\n\nexport const {provenance, actions} = setupProvenance();\n\ndocument.onkeydown = e => {\n  let mac = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n  if (!e.shiftKey && (mac ? e.metaKey : e.ctrlKey) && e.which === 90) {\n    if (!store.isAtRoot) {\n      actions.goBack();\n    }\n  } else if (e.shiftKey && (mac ? e.metaKey : e.ctrlKey) && e.which === 90) {\n    if (!store.isAtLatest) {\n      actions.goForward();\n    }\n  }\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n  Provenance,\n  isStateNode\n} from '@visdesignlab/provenance-lib-core';\nimport {\n  ApplicationState,\n  NodeMap\n} from './Interfaces/ApplicationState';\n\nimport {store} from './Interfaces/Store';\n\ninterface AppProvenance {\n  provenance: Provenance<ApplicationState, unknown, unknown>;\n  actions: {\n    goForward: () => void;\n    goBack: () => void;\n    selectNode: (node: string) => void;\n    setNodePositions: (pos: NodeMap, skipProvenance?: boolean) => void;\n  };\n}\n\nexport function setupProvenance(): AppProvenance {\n  const provenance = store.provenance;\n\n  provenance.addGlobalObserver(() => {\n    let isAtRoot = false;\n\n    const currentNode = provenance.current();\n\n    if (isStateNode(currentNode)) {\n      isAtRoot = currentNode.parent === provenance.root().id;\n    }\n\n    store.isAtRoot = isAtRoot;\n    store.isAtLatest = provenance.current().children.length === 0;\n  });\n\n  provenance.addObserver(['nodePositions'], (state?: ApplicationState) => {\n    if (\n      state &&\n      JSON.stringify(store.nodePositions) !==\n        JSON.stringify(state.nodePositions)\n    ) {\n      store.nodePositions = state.nodePositions;\n    }\n  });\n\n  provenance.addObserver(['selectedNode'], (state?: ApplicationState) => {\n    store.selectedNode = state ? state.selectedNode : store.selectedNode;\n  });\n\n  provenance.done();\n\n  const goForward = () => {\n    provenance.goForwardOneStep();\n  };\n\n  const goBack = () => {\n    provenance.goBackOneStep();\n  };\n\n  const selectNode = (node:string) => {\n    store.selectNode(node);\n  }\n\n  const setNodePositions = (pos:NodeMap, skipProvenance: boolean = false) => {\n    store.setNodePositions(pos, skipProvenance);\n  }\n\n  return {\n    provenance,\n    actions: {\n      goBack,\n      goForward,\n      selectNode,\n      setNodePositions,\n    },\n  };\n}\n"],"sourceRoot":""}